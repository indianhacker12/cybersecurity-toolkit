import requests
from bs4 import BeautifulSoup
import urllib.parse
import re
import time
from concurrent.futures import ThreadPoolExecutor
import ssl
import socket

class WebVulnerabilityScanner:
    def __init__(self):
        self.session = requests.Session()
        self.session.headers.update({
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        })
        self.vulnerabilities = []
        
        # Common payloads for testing
        self.sql_payloads = [
            "' OR '1'='1",
            "' OR 1=1--",
            "' UNION SELECT NULL--",
            "'; DROP TABLE users--",
            "1' AND 1=1--"
        ]
        
        self.xss_payloads = [
            "<script>alert('XSS')</script>",
            "javascript:alert('XSS')",
            "<img src=x onerror=alert('XSS')>",
            "';alert('XSS');//",
            "<svg onload=alert('XSS')>"
        ]
    
    def scan_target(self, url):
        """Main scanning function"""
        print(f"Starting vulnerability scan for: {url}")
        print("=" * 50)
        
        # Basic reconnaissance
        self.check_server_info(url)
        
        # Get all forms and links
        forms = self.get_forms(url)
        links = self.get_links(url)
        
        # Test for vulnerabilities
        self.test_sql_injection(url, forms)
        self.test_xss(url, forms)
        self.test_directory_traversal(url)
        self.test_ssl_configuration(url)
        self.test_security_headers(url)
        
        # Generate report
        self.generate_report()
    
    def check_server_info(self, url):
        """Gather basic server information"""
        try:
            response = self.session.get(url, timeout=10)
            print(f"Server: {response.headers.get('Server', 'Unknown')}")
            print(f"Status Code: {response.status_code}")
            print(f"Content-Type: {response.headers.get('Content-Type', 'Unknown')}")
            print("-" * 30)
        except Exception as e:
            print(f"Error gathering server info: {e}")
    
    def get_forms(self, url):
        """Extract all forms from the webpage"""
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.content, 'html.parser')
            forms = soup.find_all('form')
            print(f"Found {len(forms)} form(s)")
            return forms
        except Exception as e:
            print(f"Error extracting forms: {e}")
            return []
    
    def get_links(self, url):
        """Extract all links from the webpage"""
        try:
            response = self.session.get(url, timeout=10)
            soup = BeautifulSoup(response.content, 'html.parser')
            links = [link.get('href') for link in soup.find_all('a', href=True)]
            return links
        except Exception as e:
            print(f"Error extracting links: {e}")
            return []
    
    def test_sql_injection(self, url, forms):
        """Test for SQL injection vulnerabilities"""
        print("Testing for SQL Injection...")
        
        for form in forms:
            action = form.get('action')
            method = form.get('method', 'get').lower()
            
            inputs = form.find_all('input')
            data = {}
            
            for input_tag in inputs:
                input_name = input_tag.get('name')
                input_type = input_tag.get('type', 'text')
                
                if input_name and input_type != 'submit':
                    data[input_name] = "test"
            
            # Test each SQL payload
            for payload in self.sql_payloads:
                test_data = data.copy()
                for key in test_data:
                    test_data[key] = payload
                
                try:
                    target_url = urllib.parse.urljoin(url, action) if action else url
                    
                    if method == 'post':
                        response = self.session.post(target_url, data=test_data, timeout=10)
                    else:
                        response = self.session.get(target_url, params=test_data, timeout=10)
                    
                    # Check for SQL error messages
                    sql_errors = [
                        "sql syntax error", "mysql_fetch", "ora-01756",
                        "microsoft access driver", "odbc", "sqlite_master"
                    ]
                    
                    for error in sql_errors:
                        if error in response.text.lower():
                            vulnerability = {
                                'type': 'SQL Injection',
                                'url': target_url,
                                'payload': payload,
                                'severity': 'High'
                            }
                            self.vulnerabilities.append(vulnerability)
                            print(f"  ✗ SQL Injection detected with payload: {payload}")
                            break
                
                except Exception as e:
                    continue
    
    def test_xss(self, url, forms):
        """Test for Cross-Site Scripting vulnerabilities"""
        print("Testing for XSS...")
        
        for form in forms:
            action = form.get('action')
            method = form.get('method', 'get').lower()
            
            inputs = form.find_all('input')
            data = {}
            
            for input_tag in inputs:
                input_name = input_tag.get('name')
                input_type = input_tag.get('type', 'text')
                
                if input_name and input_type != 'submit':
                    data[input_name] = "test"
            
            # Test each XSS payload
            for payload in self.xss_payloads:
                test_data = data.copy()
                for key in test_data:
                    test_data[key] = payload
                
                try:
                    target_url = urllib.parse.urljoin(url, action) if action else url
                    
                    if method == 'post':
                        response = self.session.post(target_url, data=test_data, timeout=10)
                    else:
                        response = self.session.get(target_url, params=test_data, timeout=10)
                    
                    # Check if payload is reflected in response
                    if payload in response.text:
                        vulnerability = {
                            'type': 'Cross-Site Scripting (XSS)',
                            'url': target_url,
                            'payload': payload,
                            'severity': 'Medium'
                        }
                        self.vulnerabilities.append(vulnerability)
                        print(f"  ✗ XSS detected with payload: {payload}")
                
                except Exception as e:
                    continue
    
    def test_directory_traversal(self, url):
        """Test for directory traversal vulnerabilities"""
        print("Testing for Directory Traversal...")
        
        traversal_payloads = [
            "../../../etc/passwd",
            "..\\..\\..\\windows\\system32\\drivers\\etc\\hosts",
            "....//....//....//etc//passwd"
        ]
        
        for payload in traversal_payloads:
            try:
                test_url = f"{url}?file={payload}"
                response = self.session.get(test_url, timeout=10)
                
                if "root:" in response.text or "[drivers]" in response.text:
                    vulnerability = {
                        'type': 'Directory Traversal',
                        'url': test_url,
                        'payload': payload,
                        'severity': 'High'
                    }
                    self.vulnerabilities.append(vulnerability)
                    print(f"  ✗ Directory Traversal detected")
            
            except Exception as e:
                continue
    
    def test_ssl_configuration(self, url):
        """Test SSL/TLS configuration"""
        if not url.startswith('https://'):
            print("Testing SSL Configuration... Skipped (HTTP site)")
            return
        
        print("Testing SSL Configuration...")
        
        try:
            hostname = urllib.parse.urlparse(url).hostname
            context = ssl.create_default_context()
            
            with socket.create_connection((hostname, 443), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    cert = ssock.getpeercert()
                    
                    # Check certificate expiration
                    import datetime
                    not_after = datetime.datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                    days_until_expiry = (not_after - datetime.datetime.now()).days
                    
                    if days_until_expiry < 30:
                        vulnerability = {
                            'type': 'SSL Certificate Expiring Soon',
                            'url': url,
                            'details': f"Certificate expires in {days_until_expiry} days",
                            'severity': 'Medium'
                        }
                        self.vulnerabilities.append(vulnerability)
                        print(f"  ✗ SSL Certificate expires in {days_until_expiry} days")
        
        except Exception as e:
            print(f"  Error testing SSL: {e}")
    
    def test_security_headers(self, url):
        """Test for security headers"""
        print("Testing Security Headers...")
        
        try:
            response = self.session.get(url, timeout=10)
            headers = response.headers
            
            security_headers = {
                'X-Frame-Options': 'Missing X-Frame-Options header',
                'X-XSS-Protection': 'Missing X-XSS-Protection header',
                'X-Content-Type-Options': 'Missing X-Content-Type-Options header',
                'Strict-Transport-Security': 'Missing HSTS header',
                'Content-Security-Policy': 'Missing CSP header'
            }
            
            for header, message in security_headers.items():
                if header not in headers:
                    vulnerability = {
                        'type': 'Missing Security Header',
                        'url': url,
                        'details': message,
                        'severity': 'Low'
                    }
                    self.vulnerabilities.append(vulnerability)
                    print(f"  ✗ {message}")
        
        except Exception as e:
            print(f"Error testing security headers: {e}")
    
    def generate_report(self):
        """Generate vulnerability report"""
        print("\n" + "=" * 50)
        print("VULNERABILITY SCAN REPORT")
        print("=" * 50)
        
        if not self.vulnerabilities:
            print("✓ No vulnerabilities detected!")
            return
        
        # Group by severity
        high_severity = [v for v in self.vulnerabilities if v.get('severity') == 'High']
        medium_severity = [v for v in self.vulnerabilities if v.get('severity') == 'Medium']
        low_severity = [v for v in self.vulnerabilities if v.get('severity') == 'Low']
        
        print(f"Total vulnerabilities found: {len(self.vulnerabilities)}")
        print(f"High severity: {len(high_severity)}")
        print(f"Medium severity: {len(medium_severity)}")
        print(f"Low severity: {len(low_severity)}")
        print("-" * 50)
        
        for vuln in self.vulnerabilities:
            print(f"Type: {vuln['type']}")
            print(f"Severity: {vuln['severity']}")
            print(f"URL: {vuln['url']}")
            if 'payload' in vuln:
                print(f"Payload: {vuln['payload']}")
            if 'details' in vuln:
                print(f"Details: {vuln['details']}")
            print("-" * 30)

def main():
    scanner = WebVulnerabilityScanner()
    
    print("=== Web Application Vulnerability Scanner ===")
    url = input("Enter target URL (e.g., http://testphp.vulnweb.com): ").strip()
    
    if not url.startswith(('http://', 'https://')):
        url = 'http://testphp.vulnweb.com' + url
    
    try:
        scanner.scan_target(url)
    except KeyboardInterrupt:
        print("\nScan interrupted by user.")
    except Exception as e:
        print(f"Error during scan: {e}")

if __name__ == "__main__":
    main()
